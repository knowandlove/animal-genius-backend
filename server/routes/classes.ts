import { Router, Request, Response } from 'express';
import { uuidStorage } from '../storage-uuid';
import { requireAuth } from '../middleware/auth';
import { verifyClassOwnership } from '../middleware/ownership';
import { z } from 'zod';
import { createClassSchema } from '../validation/class-schemas';
import { generateClassInsights, generatePairings } from '../services/pairingService';

const router = Router();

// Create class
router.post('/', requireAuth, async (req: Request, res: Response) => {
  try {
    // Validate request body
    const validatedData = createClassSchema.parse(req.body);
    const { name, subject, gradeLevel, schoolName, icon, backgroundColor, numberOfStudents } = validatedData;
    
    console.log('Creating class for teacher:', req.user.userId);
    
    const newClass = await uuidStorage.createClass({
      teacherId: req.user.userId,
      name: name,
      subject: subject || null,
      gradeLevel: gradeLevel || null,
      schoolName: schoolName || null,
      icon: icon,
      backgroundColor: backgroundColor,
      numberOfStudents: numberOfStudents || null,
      classCode: '', // Will be generated by storage method
      isArchived: false
    });
    
    console.log('Created class:', newClass);
    console.log('Class code:', newClass.classCode);
    
    res.json(newClass);
  } catch (error) {
    console.error("[/api/classes POST] Create class error:", error);
    if (error instanceof z.ZodError) {
      return res.status(400).json({ 
        message: "Invalid class data", 
        errors: error.errors.map(e => ({
          field: e.path.join('.'),
          message: e.message
        }))
      });
    }
    res.status(400).json({ message: "Failed to create class" });
  }
});

// Get teacher's classes
router.get('/', requireAuth, async (req: Request, res: Response) => {
  try {
    const classesWithStats = await uuidStorage.getClassesWithStudentCount(req.user.userId);
    res.json(classesWithStats);
  } catch (error) {
    console.error("[/api/classes] Error:", error);
    res.status(500).json({ message: "Failed to get classes" });
  }
});

// Get individual class by ID
router.get('/:id', requireAuth, verifyClassOwnership, async (req: Request, res: Response) => {
  try {
    const classId = req.params.id;
    
    // Ownership already verified by middleware
    const classRecord = await uuidStorage.getClassById(classId);
    
    if (!classRecord) {
      return res.status(404).json({ message: "Class not found" });
    }
    
    res.json(classRecord);
  } catch (error) {
    console.error("Get class error:", error);
    res.status(500).json({ message: "Failed to get class" });
  }
});

// Get class by class code (for students)
router.get('/class-code/:code', async (req, res) => {
  try {
    const { code } = req.params;
    const classRecord = await uuidStorage.getClassByClassCode(code);
    
    if (!classRecord) {
      return res.status(404).json({ message: "Class not found" });
    }
    
    const teacher = await uuidStorage.getProfileById(classRecord.teacherId);
    
    res.json({
      ...classRecord,
      teacherName: teacher?.fullName || "Unknown Teacher",
    });
  } catch (error) {
    console.error("Get class by code error:", error);
    res.status(500).json({ message: "Failed to get class" });
  }
});

// Delete class (regular - fails if has students)
router.delete('/:id', requireAuth, verifyClassOwnership, async (req: Request, res: Response) => {
  try {
    const classId = req.params.id;
    
    // Ownership already verified by middleware
    await uuidStorage.deleteClass(classId);
    res.status(204).end();
  } catch (error) {
    console.error("Delete class error:", error);
    // Check for foreign key violation
    if (error instanceof Error && 'code' in error && error.code === '23503') {
      return res.status(409).json({ message: "Cannot delete class. Please remove all students from the class first." });
    }
    res.status(500).json({ message: "Failed to delete class" });
  }
});

// Import students from CSV
router.post('/:id/import-students', requireAuth, async (req: Request, res: Response) => {
  // This will be handled by the import-students middleware
  res.status(501).json({ message: "Import functionality moved to separate handler" });
});

// Get class analytics
router.get('/:id/analytics', requireAuth, async (req: Request, res: Response) => {
  try {
    const classId = req.params.id;
    console.log('[Analytics] Fetching analytics for class:', classId);
    console.log('[Analytics] User:', req.user);
    
    const classRecord = await uuidStorage.getClassById(classId);
    console.log('[Analytics] Class record:', classRecord);
    
    if (!classRecord) {
      console.log('[Analytics] Class not found in database');
      return res.status(404).json({ message: "Class not found" });
    }
    
    if (classRecord.teacherId !== req.user!.userId) {
      console.log('[Analytics] Teacher mismatch:', {
        classTeacher: classRecord.teacherId,
        requestUser: req.user!.userId
      });
      return res.status(404).json({ message: "Class not found" });
    }
    
    // Use the new efficient method that fetches everything in one query
    const allSubmissions = await uuidStorage.getClassAnalytics(classId);
    
    // Calculate statistics
    const animalDistribution: Record<string, number> = {};
    const personalityDistribution: Record<string, number> = {};
    const learningStyleDistribution: Record<string, number> = {};
    const geniusTypeDistribution: Record<string, number> = {};
    
    allSubmissions.forEach(sub => {
      animalDistribution[sub.animalType] = (animalDistribution[sub.animalType] || 0) + 1;
      geniusTypeDistribution[sub.geniusType] = (geniusTypeDistribution[sub.geniusType] || 0) + 1;
      learningStyleDistribution[sub.learningStyle] = (learningStyleDistribution[sub.learningStyle] || 0) + 1;
    });
    
    // Generate insights if there are submissions
    let insights = undefined;
    if (allSubmissions.length > 0) {
      insights = generateClassInsights(allSubmissions);
    }
    
    res.json({
      class: {
        id: classRecord.id,
        name: classRecord.name,
        code: classRecord.classCode,
        teacherId: classRecord.teacherId,
        iconEmoji: 'ðŸ“š',
        iconColor: 'hsl(202 25% 65%)'
      },
      stats: {
        totalSubmissions: allSubmissions.length,
        animalDistribution,
        personalityDistribution,
        learningStyleDistribution,
        geniusTypeDistribution,
      },
      submissions: allSubmissions,
      insights,
    });
  } catch (error) {
    console.error("[Analytics] Get analytics error:", error);
    console.error("[Analytics] Error stack:", error instanceof Error ? error.stack : 'No stack trace');
    res.status(500).json({ 
      message: "Failed to get analytics",
      error: error instanceof Error ? error.message : String(error)
    });
  }
});

// Get pairings
router.get('/:id/pairings', requireAuth, async (req: Request, res: Response) => {
  try {
    const classId = req.params.id;
    const classRecord = await uuidStorage.getClassById(classId);
    
    if (!classRecord || classRecord.teacherId !== req.user!.userId) {
      return res.status(404).json({ message: "Class not found" });
    }
    
    // Get all submissions for the class
    const allSubmissions = await uuidStorage.getClassAnalytics(classId);
    
    if (allSubmissions.length === 0) {
      return res.json({
        dynamicDuos: [],
        puzzlePairings: [],
        soloWorkers: []
      });
    }
    
    // Generate pairings using the service
    const pairings = generatePairings(allSubmissions);
    
    res.json(pairings);
  } catch (error) {
    console.error("Get pairings error:", error);
    res.status(500).json({ message: "Failed to get pairings" });
  }
});

export default router;