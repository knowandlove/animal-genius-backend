import { Router } from 'express';
import { z } from 'zod';
import { uuidStorage } from '../storage-uuid';
import { requireAuth } from '../middleware/auth';
import { verifyClassAccess, verifyClassEditAccess } from '../middleware/ownership-collaborator';
import { createClassSchema } from '../validation/class-schemas';
import { generateClassInsights, generatePairings } from '../services/pairingService';
import { getPaginationParams, addPaginationToResponse, setPaginationHeaders } from '../utils/pagination-wrapper';
import { pairingQueue, getPairingResults, getInsightsResults } from '../queues/pairing-queue';
import { asyncWrapper } from '../utils/async-wrapper';
import { createSecureLogger } from '../utils/secure-logger';
import { NotFoundError, ErrorCode } from '../utils/errors';
import type { AuthenticatedRequest } from '../types/api';

const logger = createSecureLogger('ClassRoutes');

const router = Router();

// Create class
router.post('/', requireAuth, async (req, res) => {
  const authReq = req as AuthenticatedRequest;
  try {
    // Validate request body
    const validatedData = createClassSchema.parse(authReq.body);
    const { name, subject, gradeLevel, schoolName, icon, backgroundColor, numberOfStudents } = validatedData;
    
    console.log('Creating class for teacher:', authReq.user.userId);
    
    const newClass = await uuidStorage.createClass({
      teacherId: authReq.user.userId,
      name: name,
      subject: subject || null,
      gradeLevel: gradeLevel || null,
      schoolName: schoolName || null,
      icon: icon,
      backgroundColor: backgroundColor,
      numberOfStudents: numberOfStudents || null,
      classCode: '', // Will be generated by storage method
      isArchived: false
    });
    
    console.log('Created class:', newClass);
    console.log('Class code:', newClass.classCode);
    
    res.json(newClass);
  } catch (error) {
    console.error("[/api/classes POST] Create class error:", error);
    if (error instanceof z.ZodError) {
      return res.status(400).json({ 
        message: "Invalid class data", 
        errors: error.errors.map(e => ({
          field: e.path.join('.'),
          message: e.message
        }))
      });
    }
    res.status(400).json({ message: "Failed to create class" });
  }
});

// Get teacher's classes
router.get('/', requireAuth, async (req, res) => {
  const authReq = req as AuthenticatedRequest;
  try {
    // Get classes owned by the teacher with student counts
    const teacherClasses = await uuidStorage.getClassesByTeacherId(authReq.user.userId);
    
    // Get student counts for each class
    const classesWithStats = await Promise.all(
      teacherClasses.map(async (classRecord) => {
        const studentCount = await uuidStorage.getStudentCountForClass(classRecord.id);
        return {
          ...classRecord,
          studentCount
        };
      })
    );
    
    res.json(classesWithStats);
  } catch (error) {
    console.error("[/api/classes] Error:", error);
    res.status(500).json({ message: "Failed to get classes" });
  }
});

// Get individual class by ID
router.get('/:id', requireAuth, verifyClassAccess, async (req, res) => {
  const authReq = req as AuthenticatedRequest;
  try {
    const classId = authReq.params.id;
    
    // Access already verified by middleware
    const classRecord = await uuidStorage.getClassById(classId);
    
    if (!classRecord) {
      return res.status(404).json({ message: "Class not found" });
    }
    
    res.json(classRecord);
  } catch (error) {
    console.error("Get class error:", error);
    res.status(500).json({ message: "Failed to get class" });
  }
});

// Get class by class code (for students)
router.get('/class-code/:code', async (req, res) => {
  try {
    const { code } = req.params;
    const classRecord = await uuidStorage.getClassByClassCode(code);
    
    if (!classRecord) {
      return res.status(404).json({ message: "Class not found" });
    }
    
    const teacher = await uuidStorage.getProfileById(classRecord.teacherId);
    
    res.json({
      ...classRecord,
      teacherName: teacher?.fullName || "Unknown Teacher",
    });
  } catch (error) {
    console.error("Get class by code error:", error);
    res.status(500).json({ message: "Failed to get class" });
  }
});

// Delete class (regular - fails if has students)
router.delete('/:id', requireAuth, verifyClassEditAccess, async (req, res) => {
  const authReq = req as AuthenticatedRequest;
  try {
    const classId = authReq.params.id;
    
    // Edit access already verified by middleware
    await uuidStorage.deleteClass(classId);
    res.status(204).end();
  } catch (error) {
    console.error("Delete class error:", error);
    // Check for foreign key violation
    if (error instanceof Error && 'code' in error && error.code === '23503') {
      return res.status(409).json({ message: "Cannot delete class. Please remove all students from the class first." });
    }
    res.status(500).json({ message: "Failed to delete class" });
  }
});

// Import students from CSV
router.post('/:id/import-students', requireAuth, async (req, res) => {
  const authReq = req as AuthenticatedRequest;
  // This will be handled by the import-students middleware
  res.status(501).json({ message: "Import functionality moved to separate handler" });
});

// Get all students in a class (for dashboard view)
router.get('/:id/students', requireAuth, verifyClassAccess, asyncWrapper(async (req, res, _next) => {
  const authReq = req as AuthenticatedRequest;
  const classId = authReq.params.id;
  
  try {
    // Get class details
    const classRecord = await uuidStorage.getClassById(classId);
    if (!classRecord) {
      throw new NotFoundError('Class not found', ErrorCode.RES_001);
    }
    
    // Get all students in the class with their latest quiz data if available
    const allStudents = await uuidStorage.getClassAnalytics(classId);
    
    res.json({
      class: {
        id: classRecord.id,
        name: classRecord.name,
        code: classRecord.classCode,
        teacherId: classRecord.teacherId,
      },
      students: allStudents,
      totalStudents: allStudents.length,
      studentsWithQuiz: allStudents.filter(s => s.completedAt).length
    });
  } catch (error) {
    logger.error('Failed to get class students', { error, classId });
    throw error;
  }
}));

// Get class analytics
router.get('/:id/analytics', requireAuth, verifyClassAccess, asyncWrapper(async (req, res, _next) => {
  const authReq = req as AuthenticatedRequest;
  const classId = authReq.params.id;
  
  // Validate classId format (UUID)
  const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;
  if (!classId || !uuidRegex.test(classId)) {
    logger.warn('Invalid class ID format', { classId });
    res.status(400).json({ message: 'Invalid class ID format' });
    return;
  }
  
  const memUsageBefore = process.memoryUsage();
  logger.log('Starting class analytics request', { 
    classId, 
    userId: authReq.user.userId,
    memoryMB: {
      rss: Math.round(memUsageBefore.rss / 1024 / 1024),
      heapTotal: Math.round(memUsageBefore.heapTotal / 1024 / 1024),
      heapUsed: Math.round(memUsageBefore.heapUsed / 1024 / 1024)
    }
  });
  
  try {
    const classRecord = await uuidStorage.getClassById(classId);
    logger.debug('Class record retrieved', { found: !!classRecord });
    
    if (!classRecord) {
      logger.debug('Class not found in database');
      throw new NotFoundError('Class not found', ErrorCode.RES_001);
    }
    
    // Use the new efficient method that fetches everything in one query
    logger.debug('Fetching class analytics data');
    let allSubmissions;
    try {
      allSubmissions = await uuidStorage.getClassAnalytics(classId);
      logger.log('Class analytics data fetched', { submissionCount: allSubmissions.length });
    } catch (dbError) {
      logger.error('Database error fetching analytics', { 
        error: dbError instanceof Error ? dbError.message : dbError,
        classId 
      });
      res.status(500).json({ 
        message: 'Failed to fetch analytics data',
        error: dbError instanceof Error ? dbError.message : 'Unknown database error'
      });
      return;
    }
    
    // Calculate statistics
    const animalDistribution: Record<string, number> = {};
    const personalityDistribution: Record<string, number> = {};
    const learningStyleDistribution: Record<string, number> = {};
    const geniusTypeDistribution: Record<string, number> = {};
    
    logger.debug('Processing submissions for statistics');
    allSubmissions.forEach(sub => {
      if (sub.animalType) {
        animalDistribution[sub.animalType] = (animalDistribution[sub.animalType] || 0) + 1;
      }
      if (sub.geniusType) {
        geniusTypeDistribution[sub.geniusType] = (geniusTypeDistribution[sub.geniusType] || 0) + 1;
      }
      if (sub.learningStyle) {
        learningStyleDistribution[sub.learningStyle] = (learningStyleDistribution[sub.learningStyle] || 0) + 1;
      }
      if (sub.personalityType) {
        personalityDistribution[sub.personalityType] = (personalityDistribution[sub.personalityType] || 0) + 1;
      }
    });
    
    // Generate insights if there are submissions
    let insights = undefined;
    if (allSubmissions.length > 0) {
      logger.debug('Generating class insights');
      try {
        insights = generateClassInsights(allSubmissions);
        logger.debug('Class insights generated successfully');
      } catch (insightError) {
        logger.error('Error generating insights', { 
          error: insightError instanceof Error ? {
            message: insightError.message,
            stack: insightError.stack
          } : insightError,
          submissionCount: allSubmissions.length
        });
        // Continue without insights rather than crashing
      }
    }
    
    // Check if pagination is requested
    if (authReq.query.page || authReq.query.limit) {
      const { page, limit } = getPaginationParams(authReq);
      
      const response = {
        class: {
          id: classRecord.id,
          name: classRecord.name,
          code: classRecord.classCode,
          teacherId: classRecord.teacherId,
          icon: classRecord.icon || 'book',
          backgroundColor: classRecord.backgroundColor || '#829B79',
          // Map to frontend expected fields
          iconEmoji: classRecord.icon || '📚',
          iconColor: classRecord.backgroundColor || 'hsl(202 25% 65%)'
        },
        stats: {
          totalSubmissions: allSubmissions.length,
          animalDistribution,
          personalityDistribution,
          learningStyleDistribution,
          geniusTypeDistribution,
        },
        submissions: allSubmissions,
        insights,
      };
      
      // Add pagination to submissions array
      const paginatedResponse = addPaginationToResponse(response, 'submissions', page, limit);
      setPaginationHeaders(res, page, limit, allSubmissions.length);
      
      try {
        // Test JSON serialization before sending
        const jsonString = JSON.stringify(paginatedResponse);
        logger.debug('Response serialized successfully', { size: jsonString.length });
        res.json(paginatedResponse);
      } catch (jsonError) {
        logger.error('Failed to serialize analytics response', {
          error: jsonError instanceof Error ? jsonError.message : jsonError,
          responseKeys: Object.keys(paginatedResponse),
          submissionCount: allSubmissions.length
        });
        
        // Try to identify the problematic submission
        for (let i = 0; i < allSubmissions.length; i++) {
          try {
            JSON.stringify(allSubmissions[i]);
          } catch (itemError) {
            logger.error('Failed to serialize submission', { 
              index: i, 
              studentName: allSubmissions[i].studentName,
              error: itemError instanceof Error ? itemError.message : itemError 
            });
          }
        }
        
        res.status(500).json({ message: 'Failed to process analytics data' });
      }
    } else {
      // Original response for backward compatibility
      const response = {
        class: {
          id: classRecord.id,
          name: classRecord.name,
          code: classRecord.classCode,
          teacherId: classRecord.teacherId,
          icon: classRecord.icon || 'book',
          backgroundColor: classRecord.backgroundColor || '#829B79',
          // Map to frontend expected fields
          iconEmoji: classRecord.icon || '📚',
          iconColor: classRecord.backgroundColor || 'hsl(202 25% 65%)'
        },
        stats: {
          totalSubmissions: allSubmissions.length,
          animalDistribution,
          personalityDistribution,
          learningStyleDistribution,
          geniusTypeDistribution,
        },
        submissions: allSubmissions,
        insights,
      };
      
      try {
        // Test JSON serialization before sending
        const jsonString = JSON.stringify(response);
        logger.debug('Response serialized successfully', { size: jsonString.length });
        res.json(response);
      } catch (jsonError) {
        logger.error('Failed to serialize analytics response', {
          error: jsonError instanceof Error ? jsonError.message : jsonError,
          responseKeys: Object.keys(response),
          submissionCount: allSubmissions.length
        });
        
        // Try to identify the problematic submission
        for (let i = 0; i < allSubmissions.length; i++) {
          try {
            JSON.stringify(allSubmissions[i]);
          } catch (itemError) {
            logger.error('Failed to serialize submission', { 
              index: i, 
              studentName: allSubmissions[i].studentName,
              error: itemError instanceof Error ? itemError.message : itemError 
            });
          }
        }
        
        res.status(500).json({ message: 'Failed to process analytics data' });
      }
    }
  } catch (error) {
    logger.error('Fatal error in class analytics endpoint', { 
      error, 
      classId, 
      userId: authReq.user.userId,
      stack: error instanceof Error ? error.stack : undefined 
    });
    throw error; // Let asyncWrapper handle it
  }
}));

// Get pairings (now non-blocking!)
router.get('/:id/pairings', requireAuth, verifyClassAccess, async (req, res) => {
  const authReq = req as AuthenticatedRequest;
  try {
    const classId = authReq.params.id;
    const classRecord = await uuidStorage.getClassById(classId);
    
    if (!classRecord) {
      return res.status(404).json({ message: "Class not found" });
    }
    
    // Check if we have cached results
    const cachedPairings = await getPairingResults(classId);
    
    if (cachedPairings) {
      // If it's a processing status, return that
      if (cachedPairings.status === 'processing') {
        return res.status(202).json({
          status: 'processing',
          message: 'Pairings are being generated. Please check back in a moment.',
          jobId: cachedPairings.jobId
        });
      }
      
      // Otherwise return the cached results
      return res.json(cachedPairings);
    }
    
    // No cached results, start a new job
    const job = await pairingQueue.add('generate-pairings', { classId });
    
    res.status(202).json({
      status: 'processing',
      message: 'Pairings generation started. Please check back in a moment.',
      jobId: job.id
    });
  } catch (error) {
    console.error("Get pairings error:", error);
    res.status(500).json({ message: "Failed to get pairings" });
  }
});

export default router;