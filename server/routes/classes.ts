import { Router, Request, Response } from 'express';
import { uuidStorage } from '../storage-uuid';
import { requireAuth } from '../middleware/auth';
import { verifyClassAccess, verifyClassEditAccess } from '../middleware/ownership-collaborator';
import { z } from 'zod';
import { createClassSchema } from '../validation/class-schemas';
import { generateClassInsights, generatePairings } from '../services/pairingService';
import { getAccessibleClasses, getAccessibleClassesWithStats } from '../db/collaborators';
import { getPaginationParams, addPaginationToResponse, setPaginationHeaders } from '../utils/pagination-wrapper';
import { pairingQueue, getPairingResults, getInsightsResults } from '../queues/pairing-queue';
import { asyncWrapper } from '../utils/async-wrapper';
import { createSecureLogger } from '../utils/secure-logger';
import { NotFoundError, ErrorCode } from '../utils/errors';

const logger = createSecureLogger('ClassRoutes');

const router = Router();

// Create class
router.post('/', requireAuth, async (req: Request, res: Response) => {
  try {
    // Validate request body
    const validatedData = createClassSchema.parse(req.body);
    const { name, subject, gradeLevel, schoolName, icon, backgroundColor, numberOfStudents } = validatedData;
    
    console.log('Creating class for teacher:', req.user.userId);
    
    const newClass = await uuidStorage.createClass({
      teacherId: req.user.userId,
      name: name,
      subject: subject || null,
      gradeLevel: gradeLevel || null,
      schoolName: schoolName || null,
      icon: icon,
      backgroundColor: backgroundColor,
      numberOfStudents: numberOfStudents || null,
      classCode: '', // Will be generated by storage method
      isArchived: false
    });
    
    console.log('Created class:', newClass);
    console.log('Class code:', newClass.classCode);
    
    res.json(newClass);
  } catch (error) {
    console.error("[/api/classes POST] Create class error:", error);
    if (error instanceof z.ZodError) {
      return res.status(400).json({ 
        message: "Invalid class data", 
        errors: error.errors.map(e => ({
          field: e.path.join('.'),
          message: e.message
        }))
      });
    }
    res.status(400).json({ message: "Failed to create class" });
  }
});

// Get teacher's classes (including collaborations)
router.get('/', requireAuth, async (req: Request, res: Response) => {
  try {
    // Get all accessible classes with student counts in 2 queries instead of N+1
    const classesWithStats = await getAccessibleClassesWithStats(req.user.userId);
    
    res.json(classesWithStats);
  } catch (error) {
    console.error("[/api/classes] Error:", error);
    res.status(500).json({ message: "Failed to get classes" });
  }
});

// Get individual class by ID
router.get('/:id', requireAuth, verifyClassAccess, async (req: Request, res: Response) => {
  try {
    const classId = req.params.id;
    
    // Access already verified by middleware
    const classRecord = await uuidStorage.getClassById(classId);
    
    if (!classRecord) {
      return res.status(404).json({ message: "Class not found" });
    }
    
    // Add user's role information
    const userRole = (req as any).userRole;
    
    res.json({
      ...classRecord,
      userRole
    });
  } catch (error) {
    console.error("Get class error:", error);
    res.status(500).json({ message: "Failed to get class" });
  }
});

// Get class by class code (for students)
router.get('/class-code/:code', async (req, res) => {
  try {
    const { code } = req.params;
    const classRecord = await uuidStorage.getClassByClassCode(code);
    
    if (!classRecord) {
      return res.status(404).json({ message: "Class not found" });
    }
    
    const teacher = await uuidStorage.getProfileById(classRecord.teacherId);
    
    res.json({
      ...classRecord,
      teacherName: teacher?.fullName || "Unknown Teacher",
    });
  } catch (error) {
    console.error("Get class by code error:", error);
    res.status(500).json({ message: "Failed to get class" });
  }
});

// Delete class (regular - fails if has students)
router.delete('/:id', requireAuth, verifyClassEditAccess, async (req: Request, res: Response) => {
  try {
    const classId = req.params.id;
    
    // Edit access already verified by middleware
    await uuidStorage.deleteClass(classId);
    res.status(204).end();
  } catch (error) {
    console.error("Delete class error:", error);
    // Check for foreign key violation
    if (error instanceof Error && 'code' in error && error.code === '23503') {
      return res.status(409).json({ message: "Cannot delete class. Please remove all students from the class first." });
    }
    res.status(500).json({ message: "Failed to delete class" });
  }
});

// Import students from CSV
router.post('/:id/import-students', requireAuth, async (req: Request, res: Response) => {
  // This will be handled by the import-students middleware
  res.status(501).json({ message: "Import functionality moved to separate handler" });
});

// Get class analytics
router.get('/:id/analytics', requireAuth, verifyClassAccess, asyncWrapper(async (req: Request, res: Response, next) => {
  const classId = req.params.id;
  logger.debug('Fetching analytics for class', { classId, userId: req.user.userId });
  
  const classRecord = await uuidStorage.getClassById(classId);
  logger.debug('Class record retrieved', { found: !!classRecord });
  
  if (!classRecord) {
    logger.debug('Class not found in database');
    throw new NotFoundError('Class not found', ErrorCode.RES_001);
  }
    
    // Use the new efficient method that fetches everything in one query
    const allSubmissions = await uuidStorage.getClassAnalytics(classId);
    
    // Calculate statistics
    const animalDistribution: Record<string, number> = {};
    const personalityDistribution: Record<string, number> = {};
    const learningStyleDistribution: Record<string, number> = {};
    const geniusTypeDistribution: Record<string, number> = {};
    
    allSubmissions.forEach(sub => {
      animalDistribution[sub.animalType] = (animalDistribution[sub.animalType] || 0) + 1;
      geniusTypeDistribution[sub.geniusType] = (geniusTypeDistribution[sub.geniusType] || 0) + 1;
      learningStyleDistribution[sub.learningStyle] = (learningStyleDistribution[sub.learningStyle] || 0) + 1;
    });
    
    // Generate insights if there are submissions
    let insights = undefined;
    if (allSubmissions.length > 0) {
      insights = generateClassInsights(allSubmissions);
    }
    
    // Check if pagination is requested
    if (req.query.page || req.query.limit) {
      const { page, limit } = getPaginationParams(req);
      
      const response = {
        class: {
          id: classRecord.id,
          name: classRecord.name,
          code: classRecord.classCode,
          teacherId: classRecord.teacherId,
          iconEmoji: 'ðŸ“š',
          iconColor: 'hsl(202 25% 65%)'
        },
        stats: {
          totalSubmissions: allSubmissions.length,
          animalDistribution,
          personalityDistribution,
          learningStyleDistribution,
          geniusTypeDistribution,
        },
        submissions: allSubmissions,
        insights,
      };
      
      // Add pagination to submissions array
      const paginatedResponse = addPaginationToResponse(response, 'submissions', page, limit);
      setPaginationHeaders(res, page, limit, allSubmissions.length);
      
      res.json(paginatedResponse);
    } else {
      // Original response for backward compatibility
      res.json({
        class: {
          id: classRecord.id,
          name: classRecord.name,
          code: classRecord.classCode,
          teacherId: classRecord.teacherId,
          iconEmoji: 'ðŸ“š',
          iconColor: 'hsl(202 25% 65%)'
        },
        stats: {
          totalSubmissions: allSubmissions.length,
          animalDistribution,
          personalityDistribution,
          learningStyleDistribution,
          geniusTypeDistribution,
        },
        submissions: allSubmissions,
        insights,
      });
    }
}));

// Get pairings (now non-blocking!)
router.get('/:id/pairings', requireAuth, verifyClassAccess, async (req: Request, res: Response) => {
  try {
    const classId = req.params.id;
    const classRecord = await uuidStorage.getClassById(classId);
    
    if (!classRecord) {
      return res.status(404).json({ message: "Class not found" });
    }
    
    // Check if we have cached results
    const cachedPairings = await getPairingResults(classId);
    
    if (cachedPairings) {
      // If it's a processing status, return that
      if (cachedPairings.status === 'processing') {
        return res.status(202).json({
          status: 'processing',
          message: 'Pairings are being generated. Please check back in a moment.',
          jobId: cachedPairings.jobId
        });
      }
      
      // Otherwise return the cached results
      return res.json(cachedPairings);
    }
    
    // No cached results, start a new job
    const job = await pairingQueue.add('generate-pairings', { classId });
    
    res.status(202).json({
      status: 'processing',
      message: 'Pairings generation started. Please check back in a moment.',
      jobId: job.id
    });
  } catch (error) {
    console.error("Get pairings error:", error);
    res.status(500).json({ message: "Failed to get pairings" });
  }
});

export default router;